import React, { useState, useRef, useEffect } from 'react';
import { Send, Plus, Mic, Paperclip, MoreVertical, Phone, Video, Info } from 'lucide-react';

interface Message {
  id: number;
  text: string;
  sender: 'user' | 'bot';
  timestamp: string;
}

interface Chat {
  id: number;
  name: string;
  lastMessage: string;
  time: string;
  unread: number;
  avatar: string;
}

const ChatInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
      sender: "bot",
      timestamp: new Date(Date.now() - 60000).toLocaleTimeString('vi-VN', {
        hour: '2-digit',
        minute: '2-digit'
      })
    }
  ]);

  const [inputText, setInputText] = useState<string>('');
  const [selectedChat, setSelectedChat] = useState<number>(0);
  const messagesEndRef = useRef<HTMLDivElement | null>(null);

  const chatList: Chat[] = [
    { id: 0, name: "AI Assistant", lastMessage: "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?", time: "09:30", unread: 0, avatar: "ü§ñ" },
    { id: 1, name: "Nguy·ªÖn VƒÉn A", lastMessage: "H·∫πn g·∫∑p l·∫°i sau nh√©!", time: "08:45", unread: 2, avatar: "üë®" },
    { id: 2, name: "Tr·∫ßn Th·ªã B", lastMessage: "C·∫£m ∆°n b·∫°n nhi·ªÅu!", time: "Yesterday", unread: 0, avatar: "üë©" },
    { id: 3, name: "Nh√≥m D·ª± √Ån", lastMessage: "Meeting l√∫c 2h chi·ªÅu", time: "Yesterday", unread: 5, avatar: "üë•" },
    { id: 4, name: "L√™ VƒÉn C", lastMessage: "OK, t√¥i s·∫Ω g·ª≠i file cho b·∫°n", time: "Monday", unread: 0, avatar: "üë§" }
  ];

  const botResponses: string[] = [
    "T√¥i hi·ªÉu r·ªìi, b·∫°n c√≥ c·∫ßn t√¥i gi·∫£i th√≠ch th√™m kh√¥ng?",
    "ƒê√≥ l√† m·ªôt c√¢u h·ªèi hay! T√¥i s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi.",
    "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. T√¥i c√≥ th·ªÉ gi√∫p g√¨ kh√°c kh√¥ng?",
    "Th·∫≠t th√∫ v·ªã! B·∫°n c√≥ mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ v·∫•n ƒë·ªÅ n√†y?",
    "T√¥i ƒë√£ hi·ªÉu. C√≥ ƒëi·ªÅu g√¨ kh√°c t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n kh√¥ng?",
    "R·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n!",
    "B·∫°n n√≥i ƒë√∫ng ƒë·∫•y. C√≤n g√¨ kh√°c n·ªØa kh√¥ng?",
    "ƒê·ªÉ t√¥i suy nghƒ© v·ªÅ ƒëi·ªÅu n√†y... C√≥ l·∫Ω ch√∫ng ta n√™n th·ª≠ c√°ch kh√°c."
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = () => {
    if (inputText.trim() === '') return;

    const newMessage: Message = {
      id: messages.length + 1,
      text: inputText,
      sender: "user",
      timestamp: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages(prev => [...prev, newMessage]);
    setInputText('');

    // Bot ph·∫£n h·ªìi
    setTimeout(() => {
      const botResponse: Message = {
        id: newMessage.id + 1,
        text: botResponses[Math.floor(Math.random() * botResponses.length)],
        sender: "bot",
        timestamp: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
      };
      setMessages(prev => [...prev, botResponse]);
    }, 1000 + Math.random() * 2000);
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-xl font-semibold text-gray-800">Messages</h1>
            <button className="p-2 hover:bg-gray-100 rounded-full">
              <Plus size={20} className="text-gray-600" />
            </button>
          </div>
          <div className="relative">
            <input
              type="text"
              placeholder="Search conversations..."
              className="w-full pl-4 pr-4 py-2 bg-gray-100 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        {/* Chat List */}
        <div className="flex-1 overflow-y-auto">
          {chatList.map((chat) => (
            <div
              key={chat.id}
              onClick={() => setSelectedChat(chat.id)}
              className={`p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 ${
                selectedChat === chat.id ? 'bg-blue-50 border-r-2 border-r-blue-500' : ''
              }`}
            >
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center text-lg">
                  {chat.avatar}
                </div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <h3 className="text-sm font-medium text-gray-900 truncate">{chat.name}</h3>
                    <span className="text-xs text-gray-500">{chat.time}</span>
                  </div>
                  <div className="flex items-center justify-between mt-1">
                    <p className="text-sm text-gray-600 truncate">{chat.lastMessage}</p>
                    {chat.unread > 0 && (
                      <span className="bg-blue-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                        {chat.unread}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Header */}
        <div className="bg-white border-b border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                {chatList[selectedChat]?.avatar}
              </div>
              <div>
                <h2 className="text-lg font-medium text-gray-900">{chatList[selectedChat]?.name}</h2>
                <p className="text-sm text-green-500">Online</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <button className="p-2 hover:bg-gray-100 rounded-full">
                <Phone size={20} className="text-gray-600" />
              </button>
              <button className="p-2 hover:bg-gray-100 rounded-full">
                <Video size={20} className="text-gray-600" />
              </button>
              <button className="p-2 hover:bg-gray-100 rounded-full">
                <Info size={20} className="text-gray-600" />
              </button>
              <button className="p-2 hover:bg-gray-100 rounded-full">
                <MoreVertical size={20} className="text-gray-600" />
              </button>
            </div>
          </div>
        </div>

        {/* Messages Area */}
        <div className="flex-1 overflow-y-auto p-4 bg-gray-50">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${
                    message.sender === 'user'
                      ? 'bg-blue-500 text-white rounded-br-sm'
                      : 'bg-white text-gray-800 rounded-bl-sm shadow-sm'
                  }`}
                >
                  <p className="text-sm">{message.text}</p>
                  <p
                    className={`text-xs mt-1 ${
                      message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                    }`}
                  >
                    {message.timestamp}
                  </p>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Input Area */}
        <div className="bg-white border-t border-gray-200 p-4">
          <div className="flex items-center space-x-3">
            <button className="p-2 hover:bg-gray-100 rounded-full">
              <Paperclip size={20} className="text-gray-600" />
            </button>
            <div className="flex-1 relative">
              <textarea
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Type a message..."
                className="w-full px-4 py-2 border border-gray-300 rounded-full resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                rows={1}
                style={{ minHeight: '40px', maxHeight: '120px' }}
              />
            </div>
            <button className="p-2 hover:bg-gray-100 rounded-full">
              <Mic size={20} className="text-gray-600" />
            </button>
            <button
              onClick={handleSendMessage}
              className="p-2 bg-blue-500 hover:bg-blue-600 rounded-full text-white transition-colors"
            >
              <Send size={20} />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;
