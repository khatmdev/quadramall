version: '3.8'

networks:
  ai-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: chat_ai_mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: quadra_ecommerce_db1
      MYSQL_USER: vandat
      MYSQL_PASSWORD: admin
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "3306:3306"
    networks:
      - ai-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chat_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chat AI Service
  chat-ai-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: chat_ai_app
    environment:
      # Application
      DEBUG: "false"
      APP_NAME: "Chat AI Service"
      APP_VERSION: "2.0.0"
      HOST: "0.0.0.0"
      PORT: 8000

      # Database
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: vandat
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: quadra_ecommerce_db1

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0

      # AI Services (Set your actual API keys)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-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}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-AIzaSyAg-qPR4HHAWnPBWZ16_RSVz63I77KGOlg}

      # Vector Search
      EMBEDDING_MODEL: "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
      VECTOR_DIMENSION: 384
      TOP_K_RESULTS: 5
      SIMILARITY_THRESHOLD: 0.5

      # Performance
      MAX_CONCURRENT_REQUESTS: 100
      REQUEST_TIMEOUT: 30
      BATCH_SIZE: 32

      # Cache
      ENABLE_CACHE: "true"
      CACHE_TTL_SECONDS: 3600

      # Logging
      LOG_LEVEL: "INFO"

      # Conversation
      MAX_CONVERSATION_HISTORY: 20
      CONVERSATION_TTL_HOURS: 24
      AUTO_CLEANUP_ENABLED: "true"

    volumes:
      - app_data:/app/data
    ports:
      - "8000:8000"
    networks:
      - ai-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      start_period: 60s
      retries: 3

  # Index Builder (Run once to build initial vector index)
  index-builder:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: chat_ai_index_builder
    environment:
      # Database
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: vandat
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: quadra_ecommerce_db1

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Vector Settings
      EMBEDDING_MODEL: "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
      VECTOR_DIMENSION: 384

      # Logging
      LOG_LEVEL: "INFO"

    volumes:
      - app_data:/app/data
    networks:
      - ai-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "build_index.py"]
    restart: "no"
    profiles:
      - tools

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chat_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - ai-network
    depends_on:
      - chat-ai-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
