package com.quadra.ecommerce_api.service.shiping;

import com.quadra.ecommerce_api.entity.notification.Notification;
import com.quadra.ecommerce_api.entity.order.Order;
import com.quadra.ecommerce_api.entity.shipping.DeliveryAssignment;
import com.quadra.ecommerce_api.enums.notification.NotificationType;
import com.quadra.ecommerce_api.enums.order.OrderStatus;
import com.quadra.ecommerce_api.enums.shipping.DeliveryStatus;
import com.quadra.ecommerce_api.repository.order.OrderRepo;
import com.quadra.ecommerce_api.repository.shipping.DeliveryAssignmentRepository;
import com.quadra.ecommerce_api.service.notification.NotificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class DeliverySchedulerService {

    private final DeliveryAssignmentRepository deliveryAssignmentRepository;
    private final OrderRepo orderRepository;
    private final NotificationService notificationService;
    private final DeliveryNotificationService deliveryNotificationService;

    /**
     * Ki·ªÉm tra v√† x·ª≠ l√Ω c√°c ƒë∆°n h√†ng qu√° h·∫°n giao h√†ng
     * Ch·∫°y m·ªói 30 ph√∫t
     */
    @Scheduled(cron = "0 */30 * * * *")
    @Transactional
    public void checkOverdueDeliveries() {
        log.info("Checking for overdue deliveries...");

        LocalDateTime cutoffTime = LocalDateTime.now().minusHours(2); // Qu√° h·∫°n 2 ti·∫øng

        List<DeliveryAssignment> overdueDeliveries = deliveryAssignmentRepository
                .findOverdueDeliveries(DeliveryStatus.IN_TRANSIT, cutoffTime);

        for (DeliveryAssignment assignment : overdueDeliveries) {
            // G·ª≠i th√¥ng b√°o c·∫£nh b√°o cho shipper
            if (assignment.getShipper() != null) {
                notificationService.sendNotification(
                        assignment.getShipper().getUser(),
                        NotificationType.ORDER_UPDATE,
                        "ƒê∆°n h√†ng qu√° h·∫°n",
                        "ƒê∆°n h√†ng #" + assignment.getOrder().getId() + " ƒë√£ qu√° th·ªùi gian giao h√†ng d·ª± ki·∫øn",
                        assignment.getOrder().getId(),
                        Notification.Priority.HIGH,
                        Notification.Category.ORDER,
                        "‚ö†Ô∏è"
                );
            }

            // G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng
            notificationService.sendNotification(
                    assignment.getOrder().getCustomer(),
                    NotificationType.ORDER_UPDATE,
                    "ƒê∆°n h√†ng ch·∫≠m tr·ªÖ",
                    "ƒê∆°n h√†ng #" + assignment.getOrder().getId() + " c√≥ th·ªÉ s·∫Ω giao mu·ªôn h∆°n d·ª± ki·∫øn",
                    assignment.getOrder().getId(),
                    Notification.Priority.MEDIUM,
                    Notification.Category.ORDER,
                    "üïê"
            );
        }

        log.info("Found {} overdue deliveries", overdueDeliveries.size());
    }

    /**
     * T·ª± ƒë·ªông h·ªßy c√°c ƒë∆°n h√†ng kh√¥ng c√≥ shipper nh·∫≠n sau 24 gi·ªù
     * Ch·∫°y m·ªói gi·ªù
     */
    @Scheduled(cron = "0 0 * * * *")
    @Transactional
    public void autoChancelUnassignedOrders() {
        log.info("Checking for unassigned orders to auto-cancel...");

        LocalDateTime cutoffTime = LocalDateTime.now().minusHours(24);

        List<DeliveryAssignment> unassignedOrders = deliveryAssignmentRepository
                .findOverdueDeliveries(DeliveryStatus.AVAILABLE, cutoffTime);

        for (DeliveryAssignment assignment : unassignedOrders) {
            // H·ªßy assignment
            assignment.setStatus(DeliveryStatus.CANCELLED);
            assignment.setCancelledAt(LocalDateTime.now());
            assignment.setCancellationReason("T·ª± ƒë·ªông h·ªßy do kh√¥ng c√≥ shipper nh·∫≠n trong 24 gi·ªù");
            deliveryAssignmentRepository.save(assignment);

            // H·ªßy order
            Order order = assignment.getOrder();
            order.setStatus(OrderStatus.CANCELLED);
            orderRepository.save(order);

            // G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng
            notificationService.sendNotification(
                    order.getCustomer(),
                    NotificationType.ORDER_UPDATE,
                    "ƒê∆°n h√†ng b·ªã h·ªßy",
                    "ƒê∆°n h√†ng #" + order.getId() + " ƒë√£ b·ªã h·ªßy do kh√¥ng c√≥ shipper nh·∫≠n. Ch√∫ng t√¥i s·∫Ω ho√†n ti·ªÅn cho b·∫°n.",
                    order.getId(),
                    Notification.Priority.HIGH,
                    Notification.Category.ORDER,
                    "‚ùå"
            );
        }

        log.info("Auto-cancelled {} unassigned orders", unassignedOrders.size());
    }

    /**
     * G·ª≠i nh·∫Øc nh·ªü cho shipper v·ªÅ c√°c ƒë∆°n h√†ng ch∆∞a l·∫•y
     * Ch·∫°y m·ªói 2 gi·ªù trong gi·ªù l√†m vi·ªác (8h-20h)
     */
    @Scheduled(cron = "0 0 8-20/2 * * *")
    public void remindShippersPickupOrders() {
        log.info("Sending pickup reminders to shippers...");

        LocalDateTime oneHourAgo = LocalDateTime.now().minusHours(1);

        List<DeliveryAssignment> assignedOrders = deliveryAssignmentRepository
                .findOverdueDeliveries(DeliveryStatus.ASSIGNED, oneHourAgo);

        for (DeliveryAssignment assignment : assignedOrders) {
            if (assignment.getShipper() != null) {
                notificationService.sendNotification(
                        assignment.getShipper().getUser(),
                        NotificationType.ORDER_UPDATE,
                        "Nh·∫Øc nh·ªü l·∫•y h√†ng",
                        "ƒê∆°n h√†ng #" + assignment.getOrder().getId() + " ƒë√£ ƒë∆∞·ª£c b·∫°n nh·∫≠n t·ª´ 1 gi·ªù tr∆∞·ªõc. Vui l√≤ng ƒë·∫øn l·∫•y h√†ng.",
                        assignment.getOrder().getId(),
                        Notification.Priority.MEDIUM,
                        Notification.Category.ORDER,
                        "üì¶"
                );
            }
        }

        log.info("Sent pickup reminders for {} orders", assignedOrders.size());
    }

    /**
     * Th·ªëng k√™ h√†ng ng√†y v√† g·ª≠i report
     * Ch·∫°y v√†o 23:00 h√†ng ng√†y
     */
    @Scheduled(cron = "0 0 23 * * *")
    public void generateDailyReport() {
        log.info("Generating daily delivery report...");

        LocalDateTime startOfDay = LocalDateTime.now().withHour(0).withMinute(0).withSecond(0);
        LocalDateTime endOfDay = LocalDateTime.now().withHour(23).withMinute(59).withSecond(59);

        // Th·ªëng k√™ s·ªë li·ªáu trong ng√†y
        long totalOrders = deliveryAssignmentRepository.count();
        long completedToday = deliveryAssignmentRepository
                .findOverdueDeliveries(DeliveryStatus.CONFIRMED, startOfDay).size();
        long availableOrders = deliveryAssignmentRepository.countAvailableDeliveries();

        log.info("Daily Report - Total: {}, Completed Today: {}, Available: {}",
                totalOrders, completedToday, availableOrders);

        // C√≥ th·ªÉ g·ª≠i email report cho admin ho·∫∑c l∆∞u v√†o database
    }

    /**
     * T·ª± ƒë·ªông x√°c nh·∫≠n giao h√†ng sau 7 ng√†y n·∫øu kh√°ch h√†ng kh√¥ng x√°c nh·∫≠n
     * Ch·∫°y m·ªói ng√†y v√†o 2:00 s√°ng
     */
    @Scheduled(cron = "0 0 2 * * *")
    @Transactional
    public void autoConfirmDeliveries() {
        log.info("Auto-confirming old deliveries...");

        LocalDateTime sevenDaysAgo = LocalDateTime.now().minusDays(7);

        List<DeliveryAssignment> deliveredOrders = deliveryAssignmentRepository
                .findOverdueDeliveries(DeliveryStatus.DELIVERED, sevenDaysAgo);

        for (DeliveryAssignment assignment : deliveredOrders) {
            // T·ª± ƒë·ªông x√°c nh·∫≠n
            assignment.setStatus(DeliveryStatus.CONFIRMED);
            assignment.setActualDelivery(assignment.getDeliveredAt());
            deliveryAssignmentRepository.save(assignment);

            // C·∫≠p nh·∫≠t order status
            Order order = assignment.getOrder();
            order.setStatus(OrderStatus.CONFIRMED);
            orderRepository.save(order);

            // G·ª≠i th√¥ng b√°o
            notificationService.sendNotification(
                    order.getCustomer(),
                    NotificationType.ORDER_UPDATE,
                    "ƒê∆°n h√†ng t·ª± ƒë·ªông x√°c nh·∫≠n",
                    "ƒê∆°n h√†ng #" + order.getId() + " ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√°c nh·∫≠n sau 7 ng√†y giao h√†ng.",
                    order.getId(),
                    Notification.Priority.LOW,
                    Notification.Category.ORDER,
                    "‚úÖ"
            );
        }

        log.info("Auto-confirmed {} deliveries", deliveredOrders.size());
    }
}